{"version":3,"sources":["components/Header.js","components/Footer.js","components/Wrapper.js","components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","id","children","src","alt","height","width","score","highscore","Footer","Wrapper","Cards","onClick","clickCount","name","image","App","state","cards","find","o","i","count","setState","console","log","this","sort","Math","random","gameOver","forEach","card","alert","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mzDAuBeA,G,MApBA,SAAAC,GAAK,OAChB,oCACA,yBAAKC,UAAU,mBAAmBC,GAAG,UACrC,yBAAKD,UAAU,aAAaD,EAAMG,UAClC,yBAAKC,IAAI,yEAAyEC,IAAI,oBAAoBC,OAAO,KAAKC,MAAM,MAAML,GAAG,WAErI,yBAAKD,UAAU,UAAf,UACUD,EAAMQ,MADhB,gBACoCR,EAAMS,YAK9C,yBAAKP,GAAG,QACR,gDACA,8GCJiBQ,MAVjB,WACI,OACE,yBAAKT,UAAU,kBAAkBC,GAAG,UACvC,yBAAKD,UAAU,UAChB,0BAAMA,UAAU,uBAAuBC,GAAG,gBAA1C,oCCCaS,EALC,SAAAX,GAAK,OAEjB,yBAAKC,UAAU,WAAWD,EAAMG,WCQnBS,EARD,SAAAZ,GAAK,OACjB,yBAAKC,UAAU,OAAOY,QAAS,kBAAMb,EAAMc,WAAWd,EAAME,MAC1D,yBAAKD,UAAU,aACb,yBAAKA,UAAU,YAAYI,IAAKL,EAAMe,KAAMX,IAAKJ,EAAMgB,W,OCsEhDC,E,2MAnEbC,MAAQ,CACNC,QACAX,MAAO,EACPC,UAAW,G,EAMbK,WAAa,SAAAZ,GACX,EAAKgB,MAAMC,MAAMC,MAAK,SAACC,EAAGC,GACxB,GAAID,EAAEnB,KAAOA,EAAI,CACf,GAAsB,IAAnBiB,EAAMG,GAAGC,MAMV,OALAJ,EAAMG,GAAGC,MAAQJ,EAAMG,GAAGC,MAAQ,EAClC,EAAKC,SAAS,CAAChB,MAAQ,EAAKU,MAAMV,MAAQ,IAAI,WAC5CiB,QAAQC,IAAIC,KAAKT,MAAMV,UAEzB,EAAKU,MAAMC,MAAMS,MAAK,kBAAMC,KAAKC,SAAW,OACrC,EAEP,EAAKC,gB,EAObA,SAAW,WAYX,OAZuB,EAAKb,MAAMV,MAAQ,EAAKU,MAAMT,WACnD,EAAKe,SAAS,CAACf,UAAW,EAAKS,MAAMV,QAAQ,WAC3CiB,QAAQC,IAAIC,KAAKT,MAAMT,cAI3B,EAAKS,MAAMC,MAAMa,SAAQ,SAAAC,GACvBA,EAAKV,MAAQ,KAGfW,MAAM,yBAAD,OAA0B,EAAKhB,MAAMV,QAC1C,EAAKgB,SAAS,CAAChB,MAAO,KACf,G,wEAGG,IAAD,OACP,OACE,oCACA,kBAAC,EAAD,CAAQA,MAAOmB,KAAKT,MAAMV,MAAOC,UAAWkB,KAAKT,MAAMT,YAGvD,kBAAC,EAAD,KAGGkB,KAAKT,MAAMC,MAAMgB,KAAI,SAAAF,GAAI,OACxB,kBAAC,EAAD,CACEnB,WAAY,EAAKA,WACjBZ,GAAI+B,EAAK/B,GACTkC,IAAKH,EAAK/B,GACVc,MAAOiB,EAAKjB,WAGhB,kBAAC,EAAD,Y,GA7DUqB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.353d9989.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App\";\n\nconst Header = props => (\n    <>\n    <div className=\"header fixed-top\" id=\"navbar\">\n    <div className=\"title-bar\">{props.children}</div>\n    <img src=\"https://lion-castle.com/wp-content/uploads/2019/01/sstg-logo-BLACK.png\" alt=\"Super Street Logo\" height=\"75\" width=\"150\" id=\"sslogo\"></img>\n\n    <div className=\"scores\">\n      Score: {props.score} High-score: {props.highscore}\n    </div>\n  </div>\n\n\n<div id=\"info\">\n<h1>JDM Clicky Game!</h1>\n<h2>Click on an car to earn points, but don't click on any car more than once!</h2>\n</div>\n\n</> \n  );\n\nexport default Header;\n","import React from \"react\";\nimport '../App';\n\nfunction Footer() {\n    return (\n      <div className=\"container-fluid\" id=\"footer\">\n   <nav className=\"navbar\">\n  <span className=\"navbar-brand mb-0 h1\" id=\"footercenter\">Super Street JDM Clicky Game!</span>\n</nav>\n      </div>\n    );\n  }\n  \n  export default Footer;","import React from \"react\";\nimport \"../App\";\n\nconst Wrapper = props => (\n    \n    <div className=\"wrapper\">{props.children}</div>\n  );\n\nexport default Wrapper;","import React from \"react\";\nimport '../App';\n\n\n\n  const Cards = props => (\n    <div className=\"card\" onClick={() => props.clickCount(props.id)}>\n      <div className=\"img-space\">\n        <img className=\"carimages\" alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n  \n  export default Cards;","import React, {Component} from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\nimport Cards from \"./components/Cards\";\nimport cards from \"./cards.json\";\n\n\nclass App extends Component {\n  \n  state = {\n    cards,\n    score: 0,\n    highscore: 0\n  };\n  \n\n\n\n  clickCount = id => {\n    this.state.cards.find((o, i) => {\n      if (o.id === id) {\n        if(cards[i].count === 0){\n          cards[i].count = cards[i].count + 1;\n          this.setState({score : this.state.score + 1}, function(){\n            console.log(this.state.score);\n          });\n          this.state.cards.sort(() => Math.random() - 0.5)\n          return true; \n        } else {\n          this.gameOver();\n        }\n      }\n    });\n  }\n//This is a function to be called when the user looses the game and we must reset \n//This checks to see if the current user score is higher than the high score to set them equal to each other and tell the console \n  gameOver = () => { if (this.state.score > this.state.highscore) {\n    this.setState({highscore: this.state.score}, function() {\n      console.log(this.state.highscore);\n    });\n  }\n  //Then we must reset the card count for each of the cards after the game is over \n  this.state.cards.forEach(card => {\n    card.count = 0;\n  });\n  //Then we alert the user that the game is over and show them their score \n  alert(`Game Over Your score: ${this.state.score}`);\n  this.setState({score: 0});\n  return true;\n}\n\n  render() {\n    return (\n      <>\n      <Header score={this.state.score} highscore={this.state.highscore}>\n\n        </Header>\n      <Wrapper>\n        \n\n        {this.state.cards.map(card => (\n          <Cards\n            clickCount={this.clickCount}\n            id={card.id}\n            key={card.id}\n            image={card.image}\n          />\n        ))}\n        <Footer />\n      </Wrapper>\n      </>\n    );\n  }\n  };\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}