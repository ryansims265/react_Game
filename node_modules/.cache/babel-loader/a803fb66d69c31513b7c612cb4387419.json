{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/Desktop/gt/homework/react_Game/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\nimport Cards from \"./components/Cards\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards,\n      score: 0,\n      highscore: 0\n    };\n\n    this.clickCount = id => {\n      this.state.cards.find((o, i) => {\n        if (o.id === id) {\n          if (cards[i].count === 0) {\n            cards[i].count = cards[i].count + 1;\n            this.setState({\n              score: this.state.score + 1\n            }, function () {\n              console.log(this.state.score);\n            });\n            this.state.cards.sort(() => Math.random() - 0.5);\n            return true;\n          } else {\n            this.gameOver();\n          }\n        }\n      });\n    };\n\n    this.gameOver = () => {\n      if (this.state.score > this.state.highscore) {\n        this.setState({\n          highscore: this.state.score\n        }, function () {\n          console.log(this.state.highscore);\n        });\n      } //Then we must reset the card count for each of the cards after the game is over \n\n\n      this.state.cards.forEach(card => {\n        card.count = 0;\n      }); //Then we alert the user that the game is over and show them their score \n\n      alert(\"Game Over :( \\nscore: \".concat(this.state.score));\n      this.setState({\n        score: 0\n      });\n      return true;\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Header, {\n      score: this.state.score,\n      highscore: this.state.highscore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, this.state.cards.map(card => React.createElement(Cards, {\n      clickCount: this.clickCount,\n      id: card.id,\n      key: card.id,\n      image: card.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })));\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/ryan/Desktop/gt/homework/react_Game/src/App.js"],"names":["React","Component","Header","Footer","Wrapper","Cards","cards","App","state","score","highscore","clickCount","id","find","o","i","count","setState","console","log","sort","Math","random","gameOver","forEach","card","alert","render","map","image"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\nimport Cards from \"./components/Cards\";\nimport cards from \"./cards.json\";\n\n\nclass App extends Component {\n  \n  state = {\n    cards,\n    score: 0,\n    highscore: 0\n  };\n  \n\n\n\n  clickCount = id => {\n    this.state.cards.find((o, i) => {\n      if (o.id === id) {\n        if(cards[i].count === 0){\n          cards[i].count = cards[i].count + 1;\n          this.setState({score : this.state.score + 1}, function(){\n            console.log(this.state.score);\n          });\n          this.state.cards.sort(() => Math.random() - 0.5)\n          return true; \n        } else {\n          this.gameOver();\n        }\n      }\n    });\n  }\n//This is a function to be called when the user looses the game and we must reset \n//This checks to see if the current user score is higher than the high score to set them equal to each other and tell the console \n  gameOver = () => { if (this.state.score > this.state.highscore) {\n    this.setState({highscore: this.state.score}, function() {\n      console.log(this.state.highscore);\n    });\n  }\n  //Then we must reset the card count for each of the cards after the game is over \n  this.state.cards.forEach(card => {\n    card.count = 0;\n  });\n  //Then we alert the user that the game is over and show them their score \n  alert(`Game Over :( \\nscore: ${this.state.score}`);\n  this.setState({score: 0});\n  return true;\n}\n\n  render() {\n    return (\n      <>\n      <Header score={this.state.score} highscore={this.state.highscore}>\n\n        </Header>\n      <Wrapper>\n        \n\n        {this.state.cards.map(card => (\n          <Cards\n            clickCount={this.clickCount}\n            id={card.id}\n            key={card.id}\n            image={card.image}\n          />\n        ))}\n        <Footer />\n      </Wrapper>\n      </>\n    );\n  }\n  };\n\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}